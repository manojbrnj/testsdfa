Shader "Custom/Shockwave" {
	Properties {
		_MainTex ("", 2D) = "white" {}
		_Ratio ("Ratio", Range(0, 10)) = 1
		_CenterX ("CenterX", Range(-1, 2)) = 0.5
		_CenterY ("CenterY", Range(-1, 2)) = 0.5
		_Radius ("Radius", Range(-1, 1)) = 0.2
		_Amplitude ("Amplitude", Range(-10, 10)) = 0.02
		_Wavesize ("Wavesize", Range(-10, 10)) = 0.1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 35732
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o1.xy, v1
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 7 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Amplitude;
					//   float _CenterX;
					//   float _CenterY;
					//   sampler2D _MainTex;
					//   float _Radius;
					//   float _Ratio;
					//   float _Wavesize;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Ratio       c0       1
					//   _CenterX     c1       1
					//   _CenterY     c2       1
					//   _Radius      c3       1
					//   _Amplitude   c4       1
					//   _Wavesize    c5       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c6, 1, 0, 0, 0
					    def c7, 6.28318548, 0.159154937, 0.5, -3.14159274
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.x, c5.x
					    add r0.y, -c2.x, v0.y
					    mul r0.y, r0.y, c0.x
					    mul r0.z, r0.y, r0.y
					    add r0.w, -c1.x, v0.x
					    mad r0.z, r0.w, r0.w, r0.z
					    rsq r0.z, r0.z
					    rcp r1.x, r0.z
					    add r1.y, r1.x, -c3.x
					    mul r1.y, r1.y, c7.x
					    mul r0.x, r0.x, r1.y
					    mad r0.x, r0.x, c7.y, c7.z
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c7.x, c7.w
					    sincos r2.x, r0.x
					    add r0.x, -r2.x, c6.x
					    mul r0.x, r0.x, c7.z
					    mul r0.w, r0.w, r0.x
					    mul r0.x, r0.y, r0.x
					    mul r0.xw, r0, c4.x
					    mad r0.y, r0.x, -r0.z, v0.y
					    mad r0.x, r0.w, -r0.z, v0.x
					    mov r2.x, c3.x
					    add r0.z, r2.x, c5.x
					    add r0.z, -r0.z, r1.x
					    add r0.w, -r1.x, c3.x
					    cmp r0.xy, r0.z, v0, r0
					    cmp r0.xy, r0.w, v0, r0
					    texld_pp oC0, r0, s0
					
					// approximately 36 instruction slots used (1 texture, 35 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Ratio;
						float _CenterX;
						float _CenterY;
						float _Radius;
						float _Amplitude;
						float _Wavesize;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-vec2(_CenterX, _CenterY));
					    u_xlat0.y = u_xlat0.y * _Ratio;
					    u_xlat4 = u_xlat0.y * u_xlat0.y;
					    u_xlat4 = u_xlat0.x * u_xlat0.x + u_xlat4;
					    u_xlat4 = sqrt(u_xlat4);
					    u_xlat6 = u_xlat4 + (-_Radius);
					    u_xlat6 = u_xlat6 * 6.28318548;
					    u_xlat6 = u_xlat6 / _Wavesize;
					    u_xlat6 = cos(u_xlat6);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat6 = u_xlat6 * 0.5;
					    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat6);
					    u_xlat0.xy = u_xlat0.xy * vec2(_Amplitude);
					    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat4);
					    u_xlat1.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    u_xlat0.x = _Radius + _Wavesize;
					    u_xlatb0 = u_xlat4<u_xlat0.x;
					    u_xlatb2 = _Radius<u_xlat4;
					    u_xlat0.xz = (bool(u_xlatb0)) ? u_xlat1.xy : vs_TEXCOORD0.xy;
					    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : vs_TEXCOORD0.xy;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Ratio;
						float _CenterX;
						float _CenterY;
						float _Radius;
						float _Amplitude;
						float _Wavesize;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-vec2(_CenterX, _CenterY));
					    u_xlat0.y = u_xlat0.y * _Ratio;
					    u_xlat4 = u_xlat0.y * u_xlat0.y;
					    u_xlat4 = u_xlat0.x * u_xlat0.x + u_xlat4;
					    u_xlat4 = sqrt(u_xlat4);
					    u_xlat6 = u_xlat4 + (-_Radius);
					    u_xlat6 = u_xlat6 * 6.28318548;
					    u_xlat6 = u_xlat6 / _Wavesize;
					    u_xlat6 = cos(u_xlat6);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat6 = u_xlat6 * 0.5;
					    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat6);
					    u_xlat0.xy = u_xlat0.xy * vec2(_Amplitude);
					    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat4);
					    u_xlat1.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    u_xlat0.x = _Radius + _Wavesize;
					    u_xlatb0 = u_xlat4<u_xlat0.x;
					    u_xlatb2 = _Radius<u_xlat4;
					    u_xlat0.xz = (bool(u_xlatb0)) ? u_xlat1.xy : vs_TEXCOORD0.xy;
					    u_xlat0.xy = (bool(u_xlatb2)) ? u_xlat0.xz : vs_TEXCOORD0.xy;
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
				}
			}
		}
	}
	Fallback "Diffuse"
}